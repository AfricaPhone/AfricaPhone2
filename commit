git add .
git checkout master
git pull origin master
npm install
npm start
git checkout -b Georgesmodif
git add .
git commit -m "Description de ma modification"
npx prettier --write .(pour regler les erreurs prettier)
git push origin -u Georgesmodif6 (pour une branche qui vient d'être crééer) si Non git push

# 1. Renommer la branche en local
git branch -m feature-a-renommer feature-renommee

# 2. Supprimer l'ancienne branche sur le serveur distant
git push origin --delete feature-a-renommer

//Création d'une nouvelle version de l'app
npx --yes eas-cli@latest build -p android --profile production
npx eas build -p android --profile production
ou
npx eas build -p android --profile development

# 3. Pousser la nouvelle branche et lier les deux
git push origin -u feature-renommee

# ===================================================
# ||   AIDE-MÉMOIRE DES COMMANDES GIT BRANCHES     ||
# ===================================================


# === CRÉER & LISTER ===

# Lister toutes les branches locales. L'étoile (*) indique la branche actuelle.
git branch

# Lister toutes les branches, y compris celles du dépôt distant (remote).
git branch -a

# Créer une nouvelle branche à partir du commit actuel.
git branch <nom-de-la-branche>

# Créer une nouvelle branche ET basculer dessus en une seule commande.
git switch -c <nom-de-la-branche>


# === NAVIGUER ===

# Basculer sur une branche existante pour commencer à y travailler.
git switch <nom-de-la-branche>

# Revenir rapidement à la dernière branche consultée.
git switch -


# === RENOMMER & SUPPRIMER ===

# Renommer la branche sur laquelle vous vous trouvez actuellement.
git branch -m <nouveau-nom-de-branche>

# Supprimer une branche locale (ne fonctionne que si la branche a été fusionnée).
git branch -d <nom-de-la-branche>

# FORCER la suppression d'une branche locale (utile si elle n'a pas été fusionnée).
git branch -D <nom-de-la-branche>


# === FUSIONNER & COMPARER ===

# Fusionner les modifications de <branche-a-fusionner> dans la branche actuelle.
git merge <branche-a-fusionner>

# Afficher les différences de contenu entre les derniers commits de deux branches.
git diff <branche-1>..<branche-2>

# Afficher la liste des commits qu'une branche a en plus d'une autre.
# (Exemple : ce qui est dans 'feature' mais pas encore dans 'main').
git log main..feature


# === GESTION DES BRANCHES DISTANTES (REMOTE) ===

# Envoyer une branche locale vers le dépôt distant pour la première fois.
# L'option '-u' lie la branche locale à la branche distante.
git push -u origin <nom-de-la-branche>

# Mettre à jour la branche locale actuelle avec les dernières modifications du distant.
git pull

# Supprimer une branche sur le dépôt distant (ex: GitHub, GitLab).
git push origin --delete <nom-de-la-branche>


git remote add origin.........
git push -u origin main

Cas d’un dépôt GitHub EXISTANT

Si le dépôt n’est pas vide:
Récupère d’abord: git fetch origin
Compare: git log --oneline --graph --decorate --all
Si mêmes racines: git pull --rebase origin main, résous conflits s’il y en a, puis git push -u origin main.
Si historiques sans lien: git pull --rebase --allow-unrelated-histories origin main puis résous conflits, commit, et git push.
Option CLI GitHub (facultatif)

Installer: winget install --id GitHub.cli -e
Login: gh auth login
Créer et pousser d’un coup: gh repo create <toi>/<repo> --private --source . --remote origin --push