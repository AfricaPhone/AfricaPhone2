// src/screens/home/ProductGrid.tsx
import React, { useCallback } from 'react';
import { ScrollCoordinatorProvider, useScrollCoordinator } from '../../contexts/ScrollCoordinator';
import { View, Text, StyleSheet, FlatList, ActivityIndicator, RefreshControl, ScrollView } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { Product } from '../../types';
import ProductGridCard from '../../components/ProductGridCard';
import { GridSkeleton } from '../../components/SkeletonLoader';

interface Props {
  products: Product[];
  loading: boolean;
  loadingMore: boolean;
  hasMore: boolean;
  onLoadMore: () => void;
  onRefresh: () => void;
  refreshing: boolean;
  listHeaderComponent: React.ReactElement | null;
}

const ProductGridInner: React.FC<Props> = ({
  products,
  loading,
  loadingMore,
  onLoadMore,
  onRefresh,
  refreshing,
  listHeaderComponent,
  hasMore,
}) => {
  const { parentScrollEnabled } = useScrollCoordinator();
  const navigation = useNavigation<any>();

  const renderItem = useCallback(
    ({ item }: { item: Product }) => (
      <View style={styles.gridItem}>
        <ProductGridCard product={item} onPress={() => navigation.navigate('ProductDetail', { productId: item.id })} />
      </View>
    ),
    [navigation]
  );

  if (loading && products.length === 0) {
    return (
      <ScrollView scrollEnabled={parentScrollEnabled} directionalLockEnabled nestedScrollEnabled>\r\n        {listHeaderComponent}
        <View style={styles.gridContainer}>
          {Array.from({ length: 6 }).map((_, i) => (
            <View key={i} style={styles.gridItem}>
              <GridSkeleton />
            </View>
          ))}
        </View>
      </ScrollView>
    );
  }

  const renderFooter = () => {
    if (!loadingMore) return null;
    return <ActivityIndicator style={{ marginVertical: 20 }} size="large" color="#FF7A00" />;
  };

  return (
    <FlatList={parentScrollEnabled} directionalLockEnabled nestedScrollEnabled data={products}
      renderItem={renderItem}
      keyExtractor={item => item.id}
      numColumns={2}
      ListHeaderComponent={listHeaderComponent}
      ListFooterComponent={renderFooter}
      onEndReached={hasMore ? onLoadMore : undefined}
      onEndReachedThreshold={0.5}
      columnWrapperStyle={styles.gridContainer}
      showsVerticalScrollIndicator={false}
      contentContainerStyle={{ paddingTop: 10 }}
      refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} tintColor="#FF7A00" />}
      ListEmptyComponent={
        <View style={styles.emptyContainer}>
          {!loading && <Text style={styles.emptyText}>Aucun produit dans cette cat√©gorie.</Text>}
        </View>
      }
    />
  );
};

const styles = StyleSheet.create({
  gridContainer: {
    paddingHorizontal: 16,
    justifyContent: 'space-between',
  },
  gridItem: {
    width: '48%',
    marginBottom: 16,
  },
  emptyContainer: {
    paddingVertical: 40,
    alignItems: 'center',
    minHeight: 200,
    justifyContent: 'center',
  },
  emptyText: {
    textAlign: 'center',
    color: '#666',
  },
});



const ProductGrid: React.FC<Props> = (props) => {
  return (
    <ScrollCoordinatorProvider>
      <ProductGridInner {...props} />
    </ScrollCoordinatorProvider>
  );
};

export default ProductGrid;

