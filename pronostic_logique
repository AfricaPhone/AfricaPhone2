Absolument. Voici une liste complète et structurée des tâches à réaliser pour faire évoluer votre jeu de pronostics.

Ce plan est conçu pour être divisé en phases logiques, et chaque tâche peut être assignée à un membre de votre équipe.

---
### **Phase 1 : Mettre en place une architecture multi-matchs (Fondations)**
*Objectif : Permettre à l'application de gérer plusieurs matchs sans modification du code.*

* **Tâche 1.1 : Création de l'écran "Liste des Matchs"**
    * **Responsable :** Développeur Frontend
    * **Description :** Créer un nouvel écran qui se connecte à la collection `matches` de Firestore. Cet écran doit afficher tous les matchs disponibles sous forme de liste. Chaque élément de la liste doit montrer les informations essentielles (ex: "Sénégal vs Côte d'Ivoire", "Coupe d'Afrique des Nations") et indiquer clairement le statut du match : "À venir", "Terminé".
    * **Livrable :** Un nouveau fichier d'écran (ex: `src/screens/MatchListScreen.tsx`).

* **Tâche 1.2 : Mise à jour de la navigation principale**
    * **Responsable :** Développeur Frontend
    * **Description :** Modifier le fichier de navigation (`src/navigation/index.tsx`) et l'écran d'accueil (`src/screens/HomeScreen.tsx`). Le lien "Jeu pronostique" ne doit plus pointer directement vers l'écran de jeu, mais vers le nouvel écran "Liste des Matchs".
    * **Livrable :** Modifications dans les fichiers de navigation pour intégrer le nouvel écran.

* **Tâche 1.3 : Rendre l'écran de pronostic générique**
    * **Responsable :** Développeur Frontend
    * **Description :** C'est une refactorisation majeure du fichier `src/screens/PredictionGameScreen.tsx`. Il faut supprimer la constante `MATCH_ID` codée en dur. L'écran doit maintenant accepter un `matchId` comme paramètre de navigation. Toutes les données affichées (équipes, compétition, pronostics existants) doivent être chargées depuis Firestore en utilisant cet `ID`.
    * **Livrable :** Une version mise à jour de `PredictionGameScreen.tsx` capable d'afficher n'importe quel match.

---
### **Phase 2 : Permettre la modification des pronostics (Expérience Utilisateur & Sécurité)**
*Objectif : Donner aux utilisateurs la flexibilité de changer leur pronostic avant le début du match, de manière sécurisée.*

* **Tâche 2.1 : Mise à jour des règles de sécurité Firestore**
    * **Responsable :** Développeur Backend / Admin Firebase
    * **Description :** Modifier le fichier `firestore.rules`. Il faut ajouter une règle `allow update` pour la collection `/predictions/{predictionId}`. Cette règle doit vérifier deux conditions impératives :
        1.  L'utilisateur qui fait la demande est bien le propriétaire du document (`request.auth.uid == resource.data.userId`).
        2.  L'heure de la modification est antérieure à l'heure de début du match (`request.time < get(...).data.startTime`).
    * **Livrable :** Le fichier `firestore.rules` mis à jour et déployé.

* **Tâche 2.2 : Implémenter la logique de modification dans l'application**
    * **Responsable :** Développeur Frontend
    * **Description :** Dans `PredictionGameScreen.tsx`, la fonction qui soumet le pronostic doit être modifiée. Au lieu de simplement créer un nouveau document, elle doit d'abord vérifier si l'utilisateur a déjà un pronostic pour ce match. Si c'est le cas, elle effectue une **mise à jour** (update). Sinon, elle en **crée** un nouveau. L'interface doit aussi s'adapter : le bouton "Placer mon pronostic" doit devenir "Modifier mon pronostic" si un vote existe déjà.
    * **Livrable :** Le fichier `PredictionGameScreen.tsx` avec la logique de création/modification implémentée.

---
### **Phase 3 : Gérer les résultats et identifier les gagnants (Logique Métier)**
*Objectif : Automatiser l'identification des gagnants éligibles au tirage au sort de manière fiable et sécurisée.*

* **Tâche 3.1 : Création de la Cloud Function `onMatchResultUpdated`**
    * **Responsable :** Développeur Backend / Cloud
    * **Description :** Créer et déployer une nouvelle Cloud Function qui se déclenche à chaque mise à jour d'un document dans la collection `matches`. La fonction doit :
        1.  S'activer uniquement lorsque les champs `finalScoreA` et `finalScoreB` sont renseignés.
        2.  Récupérer tous les pronostics liés à ce `matchId`.
        3.  Identifier tous les utilisateurs dont le pronostic (`scoreA`, `scoreB`) correspond exactement au score final.
        4.  Pour chaque gagnant, créer un document dans une nouvelle sous-collection : `/matches/{matchId}/eligibleWinners/{userId}`. Ce document contiendra les informations de l'utilisateur.
    * **Livrable :** Le code de la Cloud Function prêt à être déployé.

* **Tâche 3.2 : Sécurisation de la liste des gagnants**
    * **Responsable :** Développeur Backend / Admin Firebase
    * **Description :** Ajouter de nouvelles règles dans `firestore.rules` pour la sous-collection `eligibleWinners`. Seul un processus serveur (la Cloud Function) doit pouvoir y écrire. La lecture peut être autorisée pour tous les utilisateurs.
    * **Livrable :** Le fichier `firestore.rules` mis à jour avec les nouvelles règles.

---
### **Phase 4 : Afficher les résultats dans l'application (Finalisation)**
*Objectif : Informer les utilisateurs des résultats et de leur statut, bouclant ainsi l'expérience de jeu.*

* **Tâche 4.1 : Mise à jour de l'interface de l'écran de pronostic**
    * **Responsable :** Développeur Frontend
    * **Description :** Améliorer `PredictionGameScreen.tsx`. Quand un match est terminé (les scores finaux sont disponibles), l'écran doit :
        1.  Afficher le score final.
        2.  Afficher un message de statut pour l'utilisateur connecté (ex: "Félicitations, vous êtes éligible au tirage au sort !").
        3.  Afficher la liste publique de tous les utilisateurs éligibles en lisant les documents de la sous-collection `/matches/{matchId}/eligibleWinners`.
    * **Livrable :** Le fichier `PredictionGameScreen.tsx` finalisé avec l'affichage des résultats.